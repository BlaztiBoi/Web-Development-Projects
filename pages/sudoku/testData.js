/* This is Generated By ChatGPT !!!! */ 

export function generateSudoku(difficulty) {
    const base = 3;
    const side = base * base;
    const board = Array.from({ length: side }, () => Array(side).fill(0));

    const shuffle = (s) => s.map((n) => [Math.random(), n]).sort((a, b) => a[0] - b[0]).map((pair) => pair[1]);

    const nums = shuffle([...Array(side)].map((_, i) => i + 1));

    const pattern = (r, c) => nums[(base * r + Math.floor(r / base) + c) % side];

    for (let r = 0; r < side; r++) {
        for (let c = 0; c < side; c++) {
            board[r][c] = pattern(r, c);
        }
    }

    const solution = board.map((row) => row.slice());

    let emptyCells = 0;
    if (difficulty === 1) {
        emptyCells = 40; // Easy level
    } else if (difficulty === 2) {
        emptyCells = 55; // Medium level
    } else if (difficulty === 3) {
        emptyCells = 64; // Hard level
    } else {
        throw new Error("Invalid difficulty level. Please choose a value between 1 and 3.");
    }

    while (emptyCells > 0) {
        let row = Math.floor(Math.random() * side);
        let col = Math.floor(Math.random() * side);
        if (board[row][col] !== 0) {
            board[row][col] = 0;
            emptyCells--;
        }
    }

    const sudokuObject = {
        newboard: {
            grids: [
                {
                    value: board.map((row) => row.slice()),
                    solution: solution,
                    difficulty: difficulty === 1 ? "Easy" : difficulty === 2 ? "Medium" : "Hard",
                },
            ],
            results: 1,
            message: "All Ok",
        },
    };

    return sudokuObject;
}



export const testData = {
    "newboard": {
        "grids": [{
            "value": [
                [7, 6, 0, 0, 0, 0, 0, 0, 2],
                [9, 0, 4, 0, 0, 3, 0, 8, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 3, 7, 0, 0, 0, 0, 0],
                [0, 5, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 3, 2, 0, 0, 6, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [4, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 2, 0, 0, 0, 0, 0, 0]
            ],
            "solution": [
                [7, 6, 5, 1, 9, 8, 4, 3, 2],
                [9, 2, 4, 5, 7, 3, 6, 8, 1],
                [1, 3, 8, 2, 4, 6, 7, 5, 9],
                [2, 1, 3, 7, 6, 5, 9, 4, 8],
                [6, 5, 7, 4, 8, 9, 1, 2, 3],
                [8, 4, 9, 3, 2, 1, 5, 6, 7],
                [3, 8, 1, 6, 5, 7, 2, 9, 4],
                [4, 7, 6, 9, 3, 2, 8, 1, 5],
                [5, 9, 2, 8, 1, 4, 3, 7, 6]
            ],
            "difficulty": "Hard"
        }],
        "results": 1,
        "message": "All Ok"
    }
}
